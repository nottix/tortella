.TH "servent.h" 3 "17 Jun 2008" "Version 0.1" "TorTella" \" -*- nroff -*-
.ad l
.nh
.SH NAME
servent.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'common.h'\fP
.br
\fC#include 'packetmanager.h'\fP
.br
\fC#include 'utils.h'\fP
.br
\fC#include 'datamanager.h'\fP
.br
\fC#include 'init.h'\fP
.br
\fC#include 'routemanager.h'\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include <signal.h>\fP
.br
\fC#include <unistd.h>\fP
.br
\fC#include 'controller.h'\fP
.br
\fC#include <glib.h>\fP
.br
\fC#include 'logger.h'\fP
.br
\fC#include 'confmanager.h'\fP
.br
\fC#include <time.h>\fP
.br
\fC#include <sys/stat.h>\fP
.br
\fC#include <string.h>\fP
.br

.SS "Strutture dati"

.in +1c
.ti -1c
.RI "struct \fBservent_data\fP"
.br
.RI "\fITale struttura dati viene utilizzata per le operazioni di comunicazioni con un servente a cui si è connessi. \fP"
.in -1c
.SS "Definizioni"

.in +1c
.ti -1c
.RI "#define \fB_GNU_SOURCE\fP"
.br
.ti -1c
.RI "#define \fBTIMEOUT\fP   'timeout error'"
.br
.ti -1c
.RI "#define \fBWLOCK\fP(servent)"
.br
.ti -1c
.RI "#define \fBRLOCK\fP(servent)"
.br
.ti -1c
.RI "#define \fBUNLOCK\fP(servent)"
.br
.ti -1c
.RI "#define \fBUNLOCK_F\fP(servent)"
.br
.ti -1c
.RI "#define \fBCOPY_SERVENT\fP(servent, copy)"
.br
.in -1c
.SS "Ridefinizioni di tipo (typedef)"

.in +1c
.ti -1c
.RI "typedef struct \fBservent_data\fP \fBservent_data\fP"
.br
.in -1c
.SS "Funzioni"

.in +1c
.ti -1c
.RI "int \fBservent_create_server\fP (char *src_ip, \fBu_int4\fP src_port)"
.br
.RI "\fICrea un server socket. \fP"
.ti -1c
.RI "int \fBservent_create_client\fP (char *dst_ip, \fBu_int4\fP dst_port)"
.br
.RI "\fICrea un client socket. \fP"
.ti -1c
.RI "int \fBservent_start_server\fP (char *\fBlocal_ip\fP, \fBu_int4\fP \fBlocal_port\fP)"
.br
.RI "\fIAvvia il server thread che viene usato per accettare le nuove connessioni e quindi lanciare nuovi thread per gestirle. \fP"
.ti -1c
.RI "\fBservent_data\fP * \fBservent_start_client\fP (char *dest_ip, \fBu_int4\fP dest_port, \fBu_int8\fP id)"
.br
.RI "\fIAvvia un client thread usato per gestire tutte le richieste di invio pacchetti al peer associato. \fP"
.ti -1c
.RI "int \fBservent_start\fP (GList *init_servent)"
.br
.RI "\fIQuesta funzione viene utilizzata per il boot iniziale, in quanto si connette alla lista dei peer conosciuti, presi dal file di init. \fP"
.ti -1c
.RI "int \fBservent_start_timer\fP (void)"
.br
.RI "\fITale funzione non fa altro che avviare il timer thread utilizzato per supportare il meccanismo di failure detection. \fP"
.ti -1c
.RI "int \fBservent_init_connection\fP (GList *init_servent)"
.br
.RI "\fISi connette alla lista dei peer specificati, se qualcuno non è disponibile lo salta. \fP"
.ti -1c
.RI "void \fBservent_close_all\fP (void)"
.br
.RI "\fIQuesta funzione viene chiamata alla chiusura di TorTella, serve per chiudere tutti i socket aperti (non brutalmente). \fP"
.ti -1c
.RI "void \fBservent_kill_all_thread\fP (int sig)"
.br
.RI "\fIUltima funzione chiamata alla chiusura del programma, termina tutti i thread attivi. \fP"
.ti -1c
.RI "int \fBservent_init\fP (char *ip, \fBu_int4\fP port, \fBu_int1\fP status)"
.br
.RI "\fIInizializza: le variabili del peer locale, il seed, le hashtable, i lock etc. \fP"
.ti -1c
.RI "void \fBservent_init_supernode\fP ()"
.br
.RI "\fIFunzione utilizzata per il recupero delle \fBchat\fP conosciute da file, attualmente non più utilizzata. \fP"
.ti -1c
.RI "void \fBservent_close_supernode\fP ()"
.br
.RI "\fIFunzione utilizzata per il salvataggio delle \fBchat\fP conosciute su file, attualmente non più utilizzata. \fP"
.ti -1c
.RI "\fBservent_data\fP * \fBservent_get\fP (\fBu_int8\fP id)"
.br
.RI "\fIRestituisce il \fBservent_data\fP associato all'id richiesto. \fP"
.ti -1c
.RI "GList * \fBservent_get_values\fP (void)"
.br
.RI "\fIRestituisce la lista completa delle \fBservent_data\fP. \fP"
.ti -1c
.RI "GList * \fBservent_get_keys\fP (void)"
.br
.RI "\fIRestituisce la lista completa delle chiavi associate alle \fBservent_data\fP. \fP"
.ti -1c
.RI "\fBservent_data\fP * \fBservent_get_local\fP (void)"
.br
.RI "\fIRestituisce la \fBservent_data\fP del peer locale. \fP"
.ti -1c
.RI "void \fBservent_send_packet\fP (\fBservent_data\fP *sd)"
.br
.RI "\fIAggiunge alla coda di pacchetti da inviare ad uno specifico peer. \fP"
.ti -1c
.RI "\fBservent_data\fP * \fBservent_pop_queue\fP (\fBservent_data\fP *sd)"
.br
.RI "\fIRimuove dalla coda di pacchetti da inviare ad uno specifico peer. \fP"
.ti -1c
.RI "void \fBservent_append_response\fP (\fBservent_data\fP *sd, const char *response)"
.br
.RI "\fIAppende alla coda di risposta di uno specifico peer. \fP"
.ti -1c
.RI "char * \fBservent_pop_response\fP (\fBservent_data\fP *sd)"
.br
.RI "\fIRimuove dalla coda di risposta un elemento se presente, nel frattempo avvia un timer per rilevare eventuali timeout di risposta. \fP"
.ti -1c
.RI "void \fBservent_flush_data\fP (void)"
.br
.RI "\fIPulisce la lista dei pacchetti ricevuti che serve per scartare pacchetti con ID uguale a quelli ricevuti recentemente. \fP"
.ti -1c
.RI "char * \fBservent_get_search_packet\fP (\fBu_int8\fP id)"
.br
.RI "\fIRitorna l'ID del pacchetto richiesto, se presente. \fP"
.ti -1c
.RI "void \fBservent_new_search_packet\fP (\fBu_int8\fP id)"
.br
.RI "\fIAggiunge il pacchetto alla lista dei pacchetti ricevuti. \fP"
.ti -1c
.RI "char * \fBservent_get_join_packet\fP (\fBu_int8\fP id)"
.br
.RI "\fIRitorna l'ID del pacchetto richiesto, se presente. \fP"
.ti -1c
.RI "void \fBservent_new_join_packet\fP (\fBu_int8\fP id)"
.br
.RI "\fIAggiunge il pacchetto alla lista dei pacchetti ricevuti. \fP"
.ti -1c
.RI "char * \fBservent_get_leave_packet\fP (\fBu_int8\fP id)"
.br
.RI "\fIRitorna l'ID del pacchetto richiesto, se presente. \fP"
.ti -1c
.RI "void \fBservent_new_leave_packet\fP (\fBu_int8\fP id)"
.br
.RI "\fIAggiunge il pacchetto alla lista dei pacchetti ricevuti. \fP"
.ti -1c
.RI "void * \fBservent_listen\fP (void *parm)"
.br
.RI "\fIThread che riceve le richieste di connessione e avvia nuovi thread. \fP"
.ti -1c
.RI "void * \fBservent_respond\fP (void *parm)"
.br
.RI "\fIServer thread che riceve i pacchetti e risponde adeguatamente. \fP"
.ti -1c
.RI "void * \fBservent_connect\fP (void *parm)"
.br
.RI "\fIClient thread utilizzato per gestire il canale di invio pacchetti ad un peer. \fP"
.ti -1c
.RI "void * \fBservent_timer\fP (void *parm)"
.br
.RI "\fIThread utilizzato per gestire il meccanismo di failure detection e per pulire la lista dei pacchetti ricevuti. \fP"
.in -1c
.SS "Variabili"

.in +1c
.ti -1c
.RI "static GHashTable * \fBservent_hashtable\fP"
.br
.ti -1c
.RI "static GHashTable * \fBsearch_packet_hashtable\fP = NULL"
.br
.ti -1c
.RI "static GHashTable * \fBjoin_packet_hashtable\fP = NULL"
.br
.ti -1c
.RI "static GHashTable * \fBleave_packet_hashtable\fP = NULL"
.br
.ti -1c
.RI "static \fBservent_data\fP * \fBlocal_servent\fP"
.br
.ti -1c
.RI "static \fBu_int8\fP \fBnew_connection_counter\fP"
.br
.ti -1c
.RI "static pthread_t * \fBtimer_thread\fP"
.br
.ti -1c
.RI "static GList * \fBclient_fd\fP"
.br
.ti -1c
.RI "static GList * \fBserver_fd\fP"
.br
.ti -1c
.RI "static GList * \fBserver_connection_fd\fP"
.br
.ti -1c
.RI "static GList * \fBclient_thread\fP"
.br
.ti -1c
.RI "static GList * \fBserver_thread\fP"
.br
.ti -1c
.RI "static GList * \fBserver_connection_thread\fP"
.br
.in -1c
.SH "Documentazione delle definizioni"
.PP 
.SS "#define _GNU_SOURCE"
.PP
Definizione alla linea 36 del file servent.h.
.SS "#define COPY_SERVENT(servent, copy)"
.PP
\fBValore:\fP
.PP
.nf
copy=calloc(1, sizeof(servent_data)); \
                                                                                        memcpy(copy, servent, sizeof(servent_data))
.fi
.PP
Definizione alla linea 151 del file servent.h.
.SS "#define RLOCK(servent)"
.PP
\fBValore:\fP
.PP
.nf
logger(SYS_INFO, '[RLOCK]Try locking %lld\n', servent); \
                                                                if(servent_get(servent)!=NULL) { \
                                                                        pthread_rwlock_rdlock( &((servent_get(servent)->rwlock_data))); \
                                                                        logger(SYS_INFO, '[RLOCK]Lock %lld\n', servent); \
                                                                }
.fi
.PP
Definizione alla linea 135 del file servent.h.
.SS "#define TIMEOUT   'timeout error'"
.PP
Definizione alla linea 55 del file servent.h.
.SS "#define UNLOCK(servent)"
.PP
\fBValore:\fP
.PP
.nf
logger(SYS_INFO, '[UNLOCK]Try unlocking %lld\n', servent); \
                                                                if(servent_get(servent)!=NULL) { \
                                                                        pthread_rwlock_unlock( &((servent_get(servent)->rwlock_data))); \
                                                                        logger(SYS_INFO, '[UNLOCK]Unlock %lld\n', servent); \
                                                                }
.fi
.PP
Definizione alla linea 141 del file servent.h.
.SS "#define UNLOCK_F(servent)"
.PP
\fBValore:\fP
.PP
.nf
pthread_rwlock_unlock( &(((servent)->rwlock_data)) ); \
                                                                logger(SYS_INFO, '[UNLOCK_F]Unlock %lld\n', servent->id);
.fi
.PP
Definizione alla linea 147 del file servent.h.
.SS "#define WLOCK(servent)"
.PP
\fBValore:\fP
.PP
.nf
logger(SYS_INFO, '[WLOCK]Try locking %lld\n', servent); \
                                                                if(servent_get(servent)!=NULL) { \
                                                                        pthread_rwlock_wrlock( &((servent_get(servent)->rwlock_data))); \
                                                                        logger(SYS_INFO, '[WLOCK]Lock %lld\n', servent); \
                                                                }
.fi
.PP
Definizione alla linea 129 del file servent.h.
.SH "Documentazione delle ridefinizioni di tipo (typedef)"
.PP 
.SS "typedef struct \fBservent_data\fP \fBservent_data\fP"
.PP
Definizione alla linea 99 del file servent.h.
.SH "Documentazione delle funzioni"
.PP 
.SS "void servent_append_response (\fBservent_data\fP * sd, const char * response)"
.PP
Appende alla coda di risposta di uno specifico peer. 
.PP
In particolare aggiunge la risposta ricevuta dopo l'invio di un pacchetto. 
.PP
Definizione alla linea 331 del file servent.c.
.SS "void servent_close_all (void)"
.PP
Questa funzione viene chiamata alla chiusura di TorTella, serve per chiudere tutti i socket aperti (non brutalmente). 
.PP
Definizione alla linea 161 del file servent.c.
.SS "void servent_close_supernode ()"
.PP
Funzione utilizzata per il salvataggio delle \fBchat\fP conosciute su file, attualmente non più utilizzata. 
.PP
Definizione alla linea 264 del file servent.c.
.SS "void* servent_connect (void * parm)"
.PP
Client thread utilizzato per gestire il canale di invio pacchetti ad un peer. 
.PP

.PP
Aggiunta richiesta di PING nella coda del suddetto servent per iniziare la connessione verso il server.
.PP
Questo passo è fondamentale quando si effettua la connessione iniziale, Quando viene inviato il nuovo ID tramite PING. 
.PP
Definizione alla linea 1017 del file servent.c.
.SS "int servent_create_client (char * dst_ip, \fBu_int4\fP dst_port)"
.PP
Crea un client socket. 
.PP
Definizione alla linea 30 del file servent.c.
.SS "int servent_create_server (char * src_ip, \fBu_int4\fP src_port)"
.PP
Crea un server socket. 
.PP
Definizione alla linea 22 del file servent.c.
.SS "void servent_flush_data (void)"
.PP
Pulisce la lista dei pacchetti ricevuti che serve per scartare pacchetti con ID uguale a quelli ricevuti recentemente. 
.PP
Definizione alla linea 413 del file servent.c.
.SS "\fBservent_data\fP* servent_get (\fBu_int8\fP id)"
.PP
Restituisce il \fBservent_data\fP associato all'id richiesto. 
.PP
Definizione alla linea 273 del file servent.c.
.SS "char* servent_get_join_packet (\fBu_int8\fP id)"
.PP
Ritorna l'ID del pacchetto richiesto, se presente. 
.PP
E' una sorta di verifica presenta pacchetto. Utilizzato per gestire i duplicati. 
.PP
Definizione alla linea 382 del file servent.c.
.SS "GList* servent_get_keys (void)"
.PP
Restituisce la lista completa delle chiavi associate alle \fBservent_data\fP. 
.PP
Definizione alla linea 287 del file servent.c.
.SS "char* servent_get_leave_packet (\fBu_int8\fP id)"
.PP
Ritorna l'ID del pacchetto richiesto, se presente. 
.PP
E' una sorta di verifica presenta pacchetto. Utilizzato per gestire i duplicati. 
.PP
Definizione alla linea 398 del file servent.c.
.SS "\fBservent_data\fP* servent_get_local (void)"
.PP
Restituisce la \fBservent_data\fP del peer locale. 
.PP
Definizione alla linea 294 del file servent.c.
.SS "char* servent_get_search_packet (\fBu_int8\fP id)"
.PP
Ritorna l'ID del pacchetto richiesto, se presente. 
.PP
E' una sorta di verifica presenta pacchetto. Utilizzato per gestire i duplicati. 
.PP
Definizione alla linea 366 del file servent.c.
.SS "GList* servent_get_values (void)"
.PP
Restituisce la lista completa delle \fBservent_data\fP. 
.PP
Definizione alla linea 280 del file servent.c.
.SS "int servent_init (char * ip, \fBu_int4\fP port, \fBu_int1\fP status)"
.PP
Inizializza: le variabili del peer locale, il seed, le hashtable, i lock etc. 
.PP
.. 
.PP
Definizione alla linea 205 del file servent.c.
.SS "int servent_init_connection (GList * init_servent)"
.PP
Si connette alla lista dei peer specificati, se qualcuno non è disponibile lo salta. 
.PP
Definizione alla linea 144 del file servent.c.
.SS "void servent_init_supernode ()"
.PP
Funzione utilizzata per il recupero delle \fBchat\fP conosciute da file, attualmente non più utilizzata. 
.PP
Definizione alla linea 256 del file servent.c.
.SS "void servent_kill_all_thread (int sig)"
.PP
Ultima funzione chiamata alla chiusura del programma, termina tutti i thread attivi. 
.PP
Definizione alla linea 181 del file servent.c.
.SS "void* servent_listen (void * parm)"
.PP
Thread che riceve le richieste di connessione e avvia nuovi thread. 
.PP
Ogni nuovo peer (client) che richiede di connettersi al server locale viene assegnato ad un nuovo Thread che si occupera' di rispondere alle richieste del client. 
.PP
Definizione alla linea 427 del file servent.c.
.SS "void servent_new_join_packet (\fBu_int8\fP id)"
.PP
Aggiunge il pacchetto alla lista dei pacchetti ricevuti. 
.PP
Definizione alla linea 389 del file servent.c.
.SS "void servent_new_leave_packet (\fBu_int8\fP id)"
.PP
Aggiunge il pacchetto alla lista dei pacchetti ricevuti. 
.PP
Definizione alla linea 405 del file servent.c.
.SS "void servent_new_search_packet (\fBu_int8\fP id)"
.PP
Aggiunge il pacchetto alla lista dei pacchetti ricevuti. 
.PP
Definizione alla linea 373 del file servent.c.
.SS "\fBservent_data\fP* servent_pop_queue (\fBservent_data\fP * sd)"
.PP
Rimuove dalla coda di pacchetti da inviare ad uno specifico peer. 
.PP
Se non ci sono pacchetti da rimuovere rimane in attesa. 
.PP
Definizione alla linea 314 del file servent.c.
.SS "char* servent_pop_response (\fBservent_data\fP * sd)"
.PP
Rimuove dalla coda di risposta un elemento se presente, nel frattempo avvia un timer per rilevare eventuali timeout di risposta. 
.PP
Definizione alla linea 340 del file servent.c.
.SS "void* servent_respond (void * parm)"
.PP
Server thread che riceve i pacchetti e risponde adeguatamente. 
.PP
Ne esiste uno per ogni peer a cui si è connessi. Questa funzione è il vero cuore di TorTella, infatti gestisce tutti i comportamente dei programma in base ai pacchetti ricevuti.
.PP
\fBParametri:\fP
.RS 4
\fIparm\fP Socket descriptor della connessione 
.RE
.PP

.PP
Entra in questa condizione se l'ID di ricezione del pacchetto è diverso dal locale, ovvero il pacchetto non è destinato al peer che l'ha ricevuto. Inoltre controlla che l'ID non sia falso.
.PP
Evita di rinviare il pacchetto al peer da cui ha ricevuto il JOIN. Evita di inviare il pacchetto due volte ad uno stesso peer.
.PP
Controlla che il peer che ha inviato il pacchetto sia conosciuto e quindi viene interpretato come un semplice ping inviato per gestire il meccanismo di failure detection o il cambio di status.
.PP
notifica del cambio di status sulla gui. Presi i lock sulla gui per consentire l'accesso protetto ai dati della gui.
.PP
Entra in questo flusso quando il peer mittente non è ancora conosciuto dal peer locale. Serve per stabilire una nuova connesione tra i due peer.
.PP
controllo che l'id del mittente sia falso in modo da capire che è la richiesta di una nuova connessione
.PP
Rappresenta la seconda fase della connessione ad un peer. Esempio: il peer locale invia un ping con id falso ad un peer con cui vuole stabilire la connessione; il peer remoto invia un ping con il vero id. Connessione stabilita.
.PP
recupera la \fBservent_data\fP associata al precedente fake id e sostituisce il falso id con quello reale.
.PP
Ricezione di un pacchetto di tipo LEAVE.
.PP
Evita di rinviare il pacchetto al peer da cui ha ricevuto il LEAVE. Evita di inviare il pacchetto due volte ad uno stesso peer.
.PP
Ricezione di un pacchetto di tipo MESSAGE.
.PP
Ricezione di un messaggio di tipo SEARCH.
.PP
Evita di rinviare il pacchetto al peer da cui ha ricevuto il LEAVE. Evita di inviare il pacchetto due volte ad uno stesso peer.
.PP
Ricezione di un pacchetto di tipo SEARCHHITS
.PP
Converte la stringa dei risultati ricevuti in una lista di \fBchat\fP con i relativi utenti. 
.PP
Definizione alla linea 454 del file servent.c.
.SS "void servent_send_packet (\fBservent_data\fP * sd)"
.PP
Aggiunge alla coda di pacchetti da inviare ad uno specifico peer. 
.PP
In particolare si passa una \fBservent_data\fP contenete tutti i dati necessari all'invio del pacchetto. 
.PP
Definizione alla linea 305 del file servent.c.
.SS "int servent_start (GList * init_servent)"
.PP
Questa funzione viene utilizzata per il boot iniziale, in quanto si connette alla lista dei peer conosciuti, presi dal file di init. 
.PP
Inoltre inizializza tutte le variabili necessarie e avvia il server di ascolto nuove connessioni.
.PP
\fBParametri:\fP
.RS 4
\fIinit_servent\fP Lista dei serventi necessari per il boot iniziale 
.RE
.PP

.PP
Definizione alla linea 107 del file servent.c.
.SS "\fBservent_data\fP* servent_start_client (char * dest_ip, \fBu_int4\fP dest_port, \fBu_int8\fP id)"
.PP
Avvia un client thread usato per gestire tutte le richieste di invio pacchetti al peer associato. 
.PP
\fBParametri:\fP
.RS 4
\fIid\fP Se si conosce l'id del peer a cui connettersi lo si specifica, altrimenti 0. 
.RE
.PP

.PP
Definizione alla linea 62 del file servent.c.
.SS "int servent_start_server (char * local_ip, \fBu_int4\fP local_port)"
.PP
Avvia il server thread che viene usato per accettare le nuove connessioni e quindi lanciare nuovi thread per gestirle. 
.PP
Definizione alla linea 40 del file servent.c.
.SS "int servent_start_timer (void)"
.PP
Tale funzione non fa altro che avviare il timer thread utilizzato per supportare il meccanismo di failure detection. 
.PP
Definizione alla linea 135 del file servent.c.
.SS "void* servent_timer (void * parm)"
.PP
Thread utilizzato per gestire il meccanismo di failure detection e per pulire la lista dei pacchetti ricevuti. 
.PP
L'intervallo di tempo è impostato nel file di configurazione. 
.PP
Definizione alla linea 1222 del file servent.c.
.SH "Documentazione delle variabili"
.PP 
.SS "GList* \fBclient_fd\fP\fC [static]\fP"
.PP
Definizione alla linea 119 del file servent.h.
.SS "GList* \fBclient_thread\fP\fC [static]\fP"
.PP
Definizione alla linea 123 del file servent.h.
.SS "GHashTable* \fBjoin_packet_hashtable\fP = NULL\fC [static]\fP"
.PP
Definizione alla linea 107 del file servent.h.
.SS "GHashTable* \fBleave_packet_hashtable\fP = NULL\fC [static]\fP"
.PP
Definizione alla linea 109 del file servent.h.
.SS "\fBservent_data\fP* \fBlocal_servent\fP\fC [static]\fP"
.PP
Definizione alla linea 113 del file servent.h.
.SS "\fBu_int8\fP \fBnew_connection_counter\fP\fC [static]\fP"
.PP
Definizione alla linea 115 del file servent.h.
.SS "GHashTable* \fBsearch_packet_hashtable\fP = NULL\fC [static]\fP"
.PP
Definizione alla linea 105 del file servent.h.
.SS "GHashTable* \fBservent_hashtable\fP\fC [static]\fP"
.PP
Definizione alla linea 101 del file servent.h.
.SS "GList* \fBserver_connection_fd\fP\fC [static]\fP"
.PP
Definizione alla linea 121 del file servent.h.
.SS "GList* \fBserver_connection_thread\fP\fC [static]\fP"
.PP
Definizione alla linea 125 del file servent.h.
.SS "GList* \fBserver_fd\fP\fC [static]\fP"
.PP
Definizione alla linea 120 del file servent.h.
.SS "GList* \fBserver_thread\fP\fC [static]\fP"
.PP
Definizione alla linea 124 del file servent.h.
.SS "pthread_t* \fBtimer_thread\fP\fC [static]\fP"
.PP
Definizione alla linea 117 del file servent.h.
.SH "Autore"
.PP 
Generato automaticamente da Doxygen per TorTella a partire dal codice sorgente.
